// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieLibrary.Data;

#nullable disable

namespace MovieLibrary.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230716093705_testseed2")]
    partial class testseed2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "774f0df8-f23a-47a9-859c-a9a601a62b18",
                            ConcurrencyStamp = "d82ca38d-732c-4bad-b425-1c347ab964ed",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "7fb9ef24-854c-40b4-9eeb-2d39d147f8d7",
                            ConcurrencyStamp = "6d431cf2-7574-48e5-9d86-cdb4ff35755d",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MovieLibrary.Models.Actors.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            FirstName = "Margot",
                            Gender = "Female",
                            LastName = "Robbie"
                        });
                });

            modelBuilder.Entity("MovieLibrary.Models.Actors.ActorAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActorAwards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Best Actress"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Screen Actors Guild Award"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Academy Award (Oscar)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "European Film Award"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Best Actor"
                        });
                });

            modelBuilder.Entity("MovieLibrary.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PictureSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            Age = 30,
                            ConcurrencyStamp = "1647dee7-b28f-448a-b437-f5c3e508657a",
                            Email = "admin@admin.bg",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.BG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECCO1J/xHcbNb0Wm/N/3M1TBbLt6qynSt1zGOFgykapXVHqFAzDe+ZiRbSdpnFBPmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81e11253-e86f-42cf-8692-1a64c8d18798",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("MovieLibrary.Models.Movies.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<string>("AppUserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Budget")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinimumAge")
                        .HasColumnType("int");

                    b.Property<string>("PosterSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersRated")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accepted = true,
                            AppUserEmail = "admin@admin.bg",
                            AppUserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            Budget = 100000000,
                            Category = "Action",
                            Description = "Tyler Rake, a fearless black market mercenary, embarks on the most deadly extraction of his career when he's enlisted to rescue the kidnapped son of an imprisoned international crime lord.",
                            MinimumAge = 18,
                            PosterSource = "~/images/posters/extraction2020.jpg",
                            ProducerId = 1,
                            Rating = 0.0,
                            ReleaseDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Extraction",
                            TrailerUrl = "L6P3nI6VnlY",
                            UsersRated = 0
                        },
                        new
                        {
                            Id = 2,
                            Accepted = true,
                            AppUserEmail = "admin@admin.bg",
                            AppUserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            Budget = 300000000,
                            Category = "Action",
                            Description = "After barely surviving his grievous wounds from his mission in Dhaka, Bangladesh, Tyler Rake is back, and his team is ready to take on their next mission.",
                            MinimumAge = 18,
                            PosterSource = "~/images/posters/extraction2023.jpg",
                            ProducerId = 1,
                            Rating = 0.0,
                            ReleaseDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Extraction 2",
                            TrailerUrl = "Y274jZs5s7s",
                            UsersRated = 0
                        });
                });

            modelBuilder.Entity("MovieLibrary.Models.Movies.MovieAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovieAwards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Emmy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Golden Globe"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Academy Award (Oscar)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "European Film Award"
                        },
                        new
                        {
                            Id = 5,
                            Name = "British Academy Film Award"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Filmfare Award"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Critics' Choice Movie"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Best Feature Film"
                        });
                });

            modelBuilder.Entity("MovieLibrary.Models.Movies.MovieComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            MovieId = 1,
                            PostedTime = new DateTime(2023, 7, 16, 9, 37, 4, 674, DateTimeKind.Utc).AddTicks(8884),
                            Text = "Very good movie!"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            MovieId = 1,
                            PostedTime = new DateTime(2023, 7, 16, 9, 37, 4, 674, DateTimeKind.Utc).AddTicks(8915),
                            Text = "I can agree too"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            MovieId = 1,
                            PostedTime = new DateTime(2023, 7, 16, 9, 37, 4, 674, DateTimeKind.Utc).AddTicks(8925),
                            Text = "I want to watch the next one"
                        });
                });

            modelBuilder.Entity("MovieLibrary.Models.Movies.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Quentin Tarantino"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Michael Mann"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Steven Spielberg"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Jerry Bruckheimer"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Spike LeeSpike Lee"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Irwin Winkler"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dana Brunetti"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Kathleen Kennedy"
                        });
                });

            modelBuilder.Entity("MovieLibrary.Models.Relations.Actor_ActorAward", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("ActorAwardId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "ActorAwardId");

                    b.HasIndex("ActorAwardId");

                    b.ToTable("Actor_ActorAwards");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            ActorAwardId = 1
                        });
                });

            modelBuilder.Entity("MovieLibrary.Models.Relations.Actor_Movie", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Actors_Movies");
                });

            modelBuilder.Entity("MovieLibrary.Models.Relations.BucketList", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("AppUserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("BucketLists");
                });

            modelBuilder.Entity("MovieLibrary.Models.Relations.Favourite", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("AppUserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("MovieLibrary.Models.Relations.Movie_MovieAward", b =>
                {
                    b.Property<int>("MovieAwardId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("MovieAwardId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Movie_MovieAwards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MovieLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MovieLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MovieLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieLibrary.Models.Actors.Actor", b =>
                {
                    b.HasOne("MovieLibrary.Models.AppUser", "AppUser")
                        .WithMany("Actors")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("MovieLibrary.Models.Movies.Movie", b =>
                {
                    b.HasOne("MovieLibrary.Models.AppUser", "AppUser")
                        .WithMany("Movies")
                        .HasForeignKey("AppUserId");

                    b.HasOne("MovieLibrary.Models.Movies.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("MovieLibrary.Models.Movies.MovieComment", b =>
                {
                    b.HasOne("MovieLibrary.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieLibrary.Models.Movies.Movie", "Movie")
                        .WithMany("MovieComments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieLibrary.Models.Relations.Actor_ActorAward", b =>
                {
                    b.HasOne("MovieLibrary.Models.Actors.ActorAward", "ActorAward")
                        .WithMany("Actor_ActorAwards")
                        .HasForeignKey("ActorAwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieLibrary.Models.Actors.Actor", "Actor")
                        .WithMany("Actor_ActorAwards")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("ActorAward");
                });

            modelBuilder.Entity("MovieLibrary.Models.Relations.Actor_Movie", b =>
                {
                    b.HasOne("MovieLibrary.Models.Actors.Actor", "Actor")
                        .WithMany("ActorsMovies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieLibrary.Models.Movies.Movie", "Movie")
                        .WithMany("ActorsMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieLibrary.Models.Relations.BucketList", b =>
                {
                    b.HasOne("MovieLibrary.Models.AppUser", "AppUser")
                        .WithMany("BucketLists")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieLibrary.Models.Movies.Movie", "Movie")
                        .WithMany("BucketLists")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieLibrary.Models.Relations.Favourite", b =>
                {
                    b.HasOne("MovieLibrary.Models.AppUser", "AppUser")
                        .WithMany("Favourites")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieLibrary.Models.Movies.Movie", "Movie")
                        .WithMany("Favourites")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieLibrary.Models.Relations.Movie_MovieAward", b =>
                {
                    b.HasOne("MovieLibrary.Models.Movies.MovieAward", "MovieAward")
                        .WithMany("Movie_MovieAwards")
                        .HasForeignKey("MovieAwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieLibrary.Models.Movies.Movie", "Movie")
                        .WithMany("Movie_MovieAwards")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("MovieAward");
                });

            modelBuilder.Entity("MovieLibrary.Models.Actors.Actor", b =>
                {
                    b.Navigation("Actor_ActorAwards");

                    b.Navigation("ActorsMovies");
                });

            modelBuilder.Entity("MovieLibrary.Models.Actors.ActorAward", b =>
                {
                    b.Navigation("Actor_ActorAwards");
                });

            modelBuilder.Entity("MovieLibrary.Models.AppUser", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("BucketLists");

                    b.Navigation("Favourites");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MovieLibrary.Models.Movies.Movie", b =>
                {
                    b.Navigation("ActorsMovies");

                    b.Navigation("BucketLists");

                    b.Navigation("Favourites");

                    b.Navigation("MovieComments");

                    b.Navigation("Movie_MovieAwards");
                });

            modelBuilder.Entity("MovieLibrary.Models.Movies.MovieAward", b =>
                {
                    b.Navigation("Movie_MovieAwards");
                });
#pragma warning restore 612, 618
        }
    }
}
